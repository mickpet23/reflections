Lesson 2 Reflections

What happens when you initialize a repository? Why do you need to do it?

When I initialize a repository, I am creating a repository or a .git file. I need to initialize a repository to start using git and its features. Otherwise, I just have the old files and the old manual ways of saving.

Weâ€™ve introduced a few new concepts since we last revisited our concept map.

git init
git add
git status
staging area
working directory

How is the staging area different from the working directory and the repository? What value do you think it offers?

The working directory is the directory/folder that we are working in that holds all the files. The "git init" command in the terminal creates a repository. The staging area is the intermediary space between the working directory and the repository. When I use the "git add" command in the terminal, it adds the file to the staging area. After all the files are added to the staging area, I can make my first commit. The "git status" tells me what files are in the working directory and which files are in the staging area. The value that the staging area offers is that I can put any files I want in it. 

Find a bug and makes changes. First find the bug: a common way is to look through the commits. Use "git diff Old New" to find the changes. Go to the file and fix it. The working directory will have the changes but the staging area and the recent commit in the repository will not have these changes. Use "git diff" to compare the working directory with the staging area. Use "git diff --staged" to compare the staging area with the most recent commit.

How can you use the staging area to make sure you have one commit per logical change?

Make a change to a document. The most recent commit will contain the document but it hasn't been changed. The saved document in the commit will also show up in the staging area. I can compare the changed document in my working directory with the staging area to see what specific changes I made. This will help me pinpoint what changes I made since the last commit and can help me make one logical change per commit instead of many.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches would be helpful if we are experimenting. We wouldn't want to try the experiments on the master, or the main branch. So we create a new branch and we can always go back to the master branch if it doesn't work out. We can use different branches to keep track of different experiments. Branches help us take projects in new directions without fear of losing our current project/code.

How do the diagrams help you visualize the branch structure?

It's easier to visualize the branches and the parents than to have no picture.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The result of merging two branches together is to combine a lot of ideas together. For example, the master branch has all the preexisting "good" code. Then a branch can be made to fix a particular bug while still allowing the master branch to be updated. When the bug is fixed, merging two branches allows us to combine the most recent master commit with the most recent commit on the branch. We represent it on the diagram like that because there is a merge and the parent of the commit is actually different. Most commits only have one parent but the merged commit has two parents: the one from the master branch and the one from the other branch. So this picture explains why if we merge, and if we type "git log", we'll see all the commits from both branches being sorted by time of the commit. Note: If I want to see the changes made to a commit from the previous commit, the old way was to use "git diff commit_id_before commit_id_after". Now, I can use "git show commit_id" and this will show the changes made to that commit_id from the previous commit. 

Also, "git log --graph --oneline" is useful for seeing when merges were created. 